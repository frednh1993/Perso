Vagrant.configure("2") do |config|

  $script1 = <<-'SCRIPT'
  sudo apt update
  sudo apt upgrade -y
  sudo apt install mariadb-server -y
  cd /etc/mysql/
  echo '[mysqld]' |sudo tee -a mariadb.cnf
  echo 'bind-address = 0.0.0.0' |sudo tee -a mariadb.cnf
  sudo systemctl restart mariadb
  sudo mysql -e "CREATE USER IF NOT EXISTS 'test'@'%' IDENTIFIED BY 'test';"
  sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'test'@'%' WITH GRANT OPTION;"
  sudo mysql -e "FLUSH PRIVILEGES;"
  sudo mysql -e "CREATE DATABASE IF NOT EXISTS test_bd;USE test_bd;CREATE TABLE IF NOT EXISTS test_table (id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(50),age INT);INSERT INTO test_table (name, age) VALUES ('John', 25),('Alice', 30),('Bob', 28);"
  SCRIPT
  
  $script1forubuntu = <<-'SCRIPT'
  sudo apt-get update
  sudo apt-get --assume-yes install mysql-server

  cd /etc/mysql/
  echo '[mysqld]' |sudo tee -a mysql.cnf
  echo 'bind-address = 0.0.0.0' |sudo tee -a mysql.cnf

  sudo ufw allow 3306

  sudo systemctl restart mysql

  sudo mysql -e "CREATE USER IF NOT EXISTS 'test'@'%' IDENTIFIED BY 'test';"
  sudo mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'test'@'%' WITH GRANT OPTION;"
  sudo mysql -e "FLUSH PRIVILEGES;"
  sudo mysql -e "CREATE DATABASE IF NOT EXISTS test_bd;USE test_bd;CREATE TABLE IF NOT EXISTS test_table (id INT AUTO_INCREMENT PRIMARY KEY,name VARCHAR(50),age INT);INSERT INTO test_table (name, age) VALUES ('John', 25),('Alice', 30),('Bob', 28);"
  SCRIPT



  $script2 = <<-'SCRIPT'
  sudo apt-get update
  sudo apt-get -y install nginx

  cd /etc/nginx
  sudo mv nginx.conf nginx_org.conf
  echo "  user www-data;
  worker_processes auto;
  error_log  /var/log/nginx/error.log notice;
  pid        /var/run/nginx.pid;
  events {
    worker_connections  1024;
  }
  http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream; 
    log_format  main  '\$remote_addr - \$remote_user [\$time_local] \"\$request\" '
                      '\$status \$body_bytes_sent \"\$http_referer\" '
                      '\"\$http_user_agent\" \"\$http_x_forwarded_for\"'; 
  access_log  /var/log/nginx/access.log  main; 
  sendfile        on;
  keepalive_timeout  65; 
  include /etc/nginx/conf.d/*.conf;
  }" > nginx.conf

  cd /etc/nginx/conf.d
  echo "  upstream backend_servers {
    zone backend_server_zone 64k;
    server 127.0.0.1:9001;
    server 127.0.0.1:9002;
    server 127.0.0.1:9003;
  }
  server {
    listen 80;
    server_name  www.example.com;
    proxy_set_header Host \$host;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Real-IP  \$remote_addr;
    location / {
    proxy_pass http://backend_servers/;
  } 
  }" > lb.conf

  echo "  server {
    listen       9001;
    index  index.html;
    add_header Custom-Header \"Application 1\";
   
    location / {
      root   /opt/services/App1;
    }
  }
  server {
    listen       9002;
    index  index.html;
    add_header Custom-Header \"Application 2\";

    location / {
      root   /opt/services/App2;
    }
  }
  server {
    
    listen       9003;
    index  index.html;
    add_header Custom-Header \"Application 3\";

    location / {
      root   /opt/services/App3;
    }
  }" > web.conf

  cd /opt
  sudo mkdir services
  cd services
  sudo mkdir App1
  sudo mkdir App2
  sudo mkdir App3

  cd App1
  echo "  <!DOCTYPE html>
  <html>
  <head>
  <title>Test app 1</title>
  </head>
  <body>
  <h1>Test app 1</h1>
  </body>
  </html>" > index.html
  
  cd ..
  cd App2
  echo "  <!DOCTYPE html>
  <html>
  <head>
  <title>Test app 2</title>
  </head>
  <body>
  <h1>Test app 2</h1>
  </body>
  </html>" > index.html
  
  cd ..
  cd App3
  echo "  <!DOCTYPE html>
  <html>
  <head>
  <title>Test app 3</title>
  </head>
  <body>
  <h1>Test app 3</h1>
  </body>
  </html>" > index.html

  sudo nginx -s reload
  SCRIPT



  $script3 = <<-'SCRIPT'
  sudo curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
  sudo python3 get-pip.py
  /usr/local/bin/pip install Flask
  sudo firewall-cmd --zone=public --add-port=5000/tcp

  cd /home
  echo -e 'from flask import Flask\napp = Flask(__name__)\n@app.route("/")\ndef hello_world():\n\treturn "<p>Hello, World!</p>"\nif __name__ == "__main__":\n\tapp.run(debug=False, host="0.0.0.0")' > api.py
  python3 api.py
  SCRIPT

  $script3forubuntu = <<-'SCRIPT'
  sudo apt-get update
  sudo apt-get install python3
  sudo apt-get -y install python3-pip
  sudo pip3 install Flask

  cd /home
  echo -e 'from flask import Flask\napp = Flask(__name__)\n@app.route("/")\ndef hello_world():\n\treturn "<p>Hello, World!</p>"\nif __name__ == "__main__":\n\tapp.run(debug=False, host="0.0.0.0")' > api.py

  # Run the script.
  # sudo pip3 install uwsgi
  # uwsgi --socket 0.0.0.0:8000 --protocol=http -w api:app
  # sudo python3 api.py &
  sudo python3 api.py
  SCRIPT



  # - 1 - Base de données
  config.vm.define "db" do |db|
    db.vm.box = "system3g/debian12"
    db.vm.network "forwarded_port", guest: 3306, host: 3308
    db.vm.network "private_network", ip: "192.168.56.2"
    db.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--memory", 1024 * 4]
      vb.name = "vm-db"
    end
    db.vm.provision "shell", inline: $script1
  end

  # # - 1 - Base de données avec Ubuntu
  # config.vm.define "db" do |db|
  #   db.vm.box = "hashicorp/bionic64"
  #   db.vm.box_version = "1.0.282"
  #   db.vm.network "forwarded_port", guest: 3306, host: 3308
  #   db.vm.network "private_network", ip: "192.168.56.2"
  #   db.vm.provider "virtualbox" do |vb|
  #     vb.customize ["modifyvm", :id, "--memory", 1024 * 4]
  #     vb.name = "vm-db"
  #   end
  #   db.vm.provision "shell", inline: $script
  # end



  # - 2 - Équilibreur de charge
  config.vm.define "lb" do |lb|
    lb.vm.box = "hashicorp/bionic64"
    lb.vm.box_version = "1.0.282"
    lb.vm.network "private_network", ip: "192.168.56.3"
    lb.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--memory", 1024 * 4]
      vb.name = "vm-lb"
    end
    lb.vm.provision "shell", inline: $script2
  end



  # - 3 - API 
  config.vm.define "api" do |api|
    api.vm.box = "generic/rhel9"
    api.vm.network "private_network", ip: "192.168.56.4"
    api.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--memory", 1024 * 4]
      vb.name = "vm-api"
    end
    api.vm.provision "shell", inline: $script3
  end

  # # - 3 - API avec Ubuntu
  # config.vm.define "api" do |api|
  #   api.vm.box = "hashicorp/bionic64"
  #   api.vm.box_version = "1.0.282"
  #   api.vm.network "private_network", ip: "192.168.56.4"
  #   api.vm.provider "virtualbox" do |vb|
  #     vb.customize ["modifyvm", :id, "--memory", 1024 * 4]
  #     vb.name = "vm-api"
  #   end
  #   api.vm.provision "shell", inline: $script3
  # end

end