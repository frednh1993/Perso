# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "abelsrz/ubuntu2204_desktop"
  config.vm.box_version = "1.0.0"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "\"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end

# -------------------------------------------------------------------------------------------------------------- #

# // ------------ DB ------------ //
# Use Vagrant API version 2 (Cloud).
# config := Vagrant configuration object
Vagrant.configure("2") do |config|
  # Will install this box (Standard Ubuntu 18.04 LTS 64 bit, 494 MB) from Vagrant API.
  config.vm.box = "hashicorp/bionic64"
  config.vm.box_version = "1.0.282"

  # Create a private network, which allows host-only access to the machine using a specific IP.
  config.vm.network "private_network", ip: "192.168.56.2"
  config.vm.hostname = "database-server"

  # Will use Virtualbox.
  config.vm.provider "virtualbox" do |vb|
    # Set the RAM of the virtual machine to 4GB.
    vb.customize ["modifyvm", :id, "--memory", 1024 * 4]
    vb.name = "vm-ubuntu-db-server"
  end


  # Provisioning script
  $script = <<-'SCRIPT'
  sudo apt-get update

    # Install MariaDB server package
  sudo apt-get install -y mariadb-server

   # Start MariaDB service
  sudo systemctl start mariadb

  # Enable MariaDB to start on boot
  sudo systemctl enable mariadb

  # Check MariaDB service status
  sudo systemctl status mariadb
  SCRIPT
  

  # File ("bootstrap.sh") that is going to be executed at the machine creation, to provision the machine.
  config.vm.provision "shell", inline: $script
end



# // ------------ API  ------------ //
Vagrant.configure("2") do |config_api|

  # config_api.vm.box = "debian/jessie64"
  # config_api.vm.box_version = "8.11.0"
  config_api.vm.box = "hashicorp/bionic64"
  config_api.vm.box_version = "1.0.282"
  config_api.vm.hostname = "api-server"
  config_api.vm.network "private_network", ip: "192.168.56.3"

  config_api.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--memory", 1024 * 4]
    vb.name = "vm-ubuntu-api-server"
  end

  $script = <<-'SCRIPT'
  sudo apt-get update

    # Install Python and Flask
  sudo apt-get install python3
  sudo apt-get -y install python3-pip
  sudo pip3 install Flask

   # Location of the api in "home" folder.
  cd /home
  echo -e 'from flask import Flask\napp = Flask(__name__)\n@app.route("/")\ndef hello_world():\n\treturn "<p>Hello, World!</p>"\nif __name__ == "__main__":\n\tapp.run(debug=False, host="0.0.0.0")' > api.py

  # Run the script.
  sudo python3 api.py

  SCRIPT
  
  config_api.vm.provision "shell", inline: $script
end

# # vagrant up        ( To create new Vagrant machines from the Vagrantfile. )
#     # vagrant package   ( To compile the Vagrantfile into a box. )
#     # vagrant validate  ( To preventively check if the Vagrantfile contains syntax errors or certain types of bugs. )