#define _CRT_SECURE_NO_WARNINGS
#include "Utils.h"
#include <iostream>
#include <windows.h>
#include <winspool.h>
#include <string>
#include <cstring>
#include <vector>


std::string Utils::EnteringInformation() 
{
    std::string age;

    std::cout << "Entrez votre âge : ";
    std::cin >> age;

    return age;
}


void Utils::DisplayInformation(std::string age)
{
    std::cout << "Âge de l'utilisateur : " << age << std::endl;
}


void Utils::Printing(std::string age)
{
    DWORD dwSize = 0;
    GetDefaultPrinter(NULL, &dwSize);

    // Allocate memory for the default printer name
    wchar_t* pDefaultPrinterName = new wchar_t[dwSize];

    // Retrieve the default printer name
    if (GetDefaultPrinter(pDefaultPrinterName, &dwSize)) {
        std::wcout << L"Imprimante par défaut : " << pDefaultPrinterName << std::endl;
    } 
    
    HANDLE handlePrinter = NULL;
    LPHANDLE lphandlePrinter = &handlePrinter;

    PRINTER_DEFAULTS printerDefaults;
    printerDefaults.pDatatype = NULL;
    printerDefaults.pDevMode = NULL;
    printerDefaults.DesiredAccess = PRINTER_ACCESS_USE;

    OpenPrinter(pDefaultPrinterName, lphandlePrinter, NULL);

    DWORD level = 1;

    const int length = age.length();
    char* data = new char[length + 1];
    strcpy(data, age.c_str());

    DWORD dataSize = sizeof(data);

    DOC_INFO_1 docInfo;

    const wchar_t* docName = L"Age";
    LPTSTR lpDocName = const_cast<LPTSTR>(docName);

    const wchar_t* dataType = L"TEXT";
    LPTSTR lpDataType = const_cast<LPTSTR>(dataType);

    docInfo.pOutputFile = NULL;
    docInfo.pDocName = lpDocName;
    docInfo.pDatatype = lpDataType;

    // -1- StartDocPrinter
    DWORD printJob = StartDocPrinter(handlePrinter, level, (LPBYTE)&docInfo);

    // -2- StartPagePrinter
    StartPagePrinter(handlePrinter);

    DWORD bytesWritten = 0;

    // -3- WritePrinter
    if (!WritePrinter(handlePrinter, (LPVOID)data, dataSize, &bytesWritten)) {
        std::cerr << "Échec de l'impression!" << std::endl;
        ClosePrinter(handlePrinter);
        return;
    }

    // -4- EndPagePrinter
    EndPagePrinter(handlePrinter);

    // -5- EndDocPrinter
    EndDocPrinter(handlePrinter);

    // Close the printer handle
    ClosePrinter(handlePrinter);

    delete[] pDefaultPrinterName;
}
