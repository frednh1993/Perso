import sys
from win32printing import win32print, win32ui
# from win32 import win32print, win32gui
# from pythonwin import win32ui
import pytest
AGE = 30

import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


# class MyHandler(FileSystemEventHandler):
#     def on_created(self, event):
#         if not event.is_directory:
#             print(f"New file created: {event.src_path}")

# if __name__ == "__main__":
#     # Specify the directory to watch
#     path = "/path/to/print/spooler/directory"

#     # Create an observer
#     observer = Observer()
#     observer.schedule(MyHandler(), path, recursive=False)
#     observer.start()

#     try:
#         while True:
#             time.sleep


def save_information_to_txt_file(information):
    output_file = "output_to_print.txt"
    with open(output_file, "w") as file:
        file.write(""+str(information)+"")


# 2.2 Présentez le code requis pour effectuer trois requêtes vers le système d’exploitation :

# saisie d’une information (entrée de données au clavier)
def entering_information():
    information = input("Entrez votre âge: ")
    return information

# affichage de l’information à l’écran
def display_information(information):
    print("",information)

# impression de la même information qu’à l’étape précédente, mais à partir d’une imprimante,
# donc, effectuer un appel à l’imprimante (par défaut)
def print_information(information):

    output_file = "output.txt"
    with open(output_file, "w") as file:
        file.write(""+str(AGE)+"")

    printer_name = win32print.GetDefaultPrinter()

    printer = win32ui.CreateDC()
    printer.CreatePrinterDC(printer_name)
    # printer.CreatePrinterDC(printer_name)

    with open(output_file, "rb") as file_to_read:
        data = file_to_read.read()

    printer.StartDoc('output.txt')

    printer.StartPage()
    info_to_print = data.decode("utf-8")
    printer.TextOut(100, 100, info_to_print)
    printer.EndPage()
    printer.EndDoc()




# Tests :
# def test_entering_information():
#     assert entering_information() == AGE

# def display_information(AGE):
#     output_file = "console_output.txt"
#     sys.stdout = open(output_file, "w")
#     display_information(AGE)
#     sys.stdout.close()
#     sys.stdout = sys.__stdout__

#     content = ""
#     with open(output_file, "r") as file:
#         content = file.read()

#     assert content == AGE




#entering_information()
#display_information(AGE)
print_information(AGE)
